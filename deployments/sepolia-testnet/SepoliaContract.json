{
  "address": "0xb80f4395aA198f48567763f2e9789505c05F45F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "questionText",
          "type": "bytes"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "outcome",
          "type": "int256"
        }
      ],
      "name": "MarketSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "questionText",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OracleRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "outcome",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "ResultSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NO_ANSWER_POSSIBLE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOO_EARLY_RESPONSE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "jsonQuestion",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "verificationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionCount",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "data",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "questionText",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "verificationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isResolved",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "outcome",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_requestTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "questionText",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "verificationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isResolved",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "outcome",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEventBased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "requestSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "sendMarketResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "settleMarket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf8fb45d1073c9116246c8d663bf81376700b174035b994b03d31adba553b602d",
  "receipt": {
    "to": null,
    "from": "0x504b635B7E22F8DF7d037cf31639811AE583E9f0",
    "contractAddress": "0xb80f4395aA198f48567763f2e9789505c05F45F4",
    "transactionIndex": 57,
    "gasUsed": "3111518",
    "logsBloom": "0x
    "blockHash": "0x19c6325497f580e2f95fa619c8049d6ba7c2276f1ba5b498d1ec1f2b21c47c52",
    "transactionHash": "0xf8fb45d1073c9116246c8d663bf81376700b174035b994b03d31adba553b602d",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 8015465,
        "transactionHash": "0xf8fb45d1073c9116246c8d663bf81376700b174035b994b03d31adba553b602d",
        "address": "0xb80f4395aA198f48567763f2e9789505c05F45F4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000504b635b7e22f8df7d037cf31639811ae583e9f0"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x19c6325497f580e2f95fa619c8049d6ba7c2276f1ba5b498d1ec1f2b21c47c52"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 8015465,
        "transactionHash": "0xf8fb45d1073c9116246c8d663bf81376700b174035b994b03d31adba553b602d",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000b80f4395aa198f48567763f2e9789505c05f45f4000000000000000000000000504b635b7e22f8df7d037cf31639811ae583e9f0",
        "logIndex": 101,
        "blockHash": "0x19c6325497f580e2f95fa619c8049d6ba7c2276f1ba5b498d1ec1f2b21c47c52"
      }
    ],
    "blockNumber": 8015465,
    "cumulativeGasUsed": "30380654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0x504b635B7E22F8DF7d037cf31639811AE583E9f0"
  ],
  "numDeployments": 1,
  "solcInputHash": "1ea68fe196db437b170f822ed09cc3e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"questionText\",\"type\":\"bytes\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"outcome\",\"type\":\"int256\"}],\"name\":\"MarketSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"questionText\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OracleRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"outcome\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"ResultSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_ANSWER_POSSIBLE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOO_EARLY_RESPONSE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"jsonQuestion\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"verificationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionCount\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"questionText\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verificationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"outcome\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_requestTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"questionText\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verificationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"outcome\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEventBased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"requestSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"sendMarketResult\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"settleMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quote(uint32,string,bytes,bool)\":{\"params\":{\"_dstEid\":\"Destination chain's endpoint ID.\",\"_message\":\"The message.\",\"_options\":\"Message execution options (e.g., for sending gas to destination).\",\"_payInLzToken\":\"Whether to return fee in ZRO token.\"},\"returns\":{\"fee\":\"A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"send(uint32,string,bytes)\":{\"details\":\"Encodes the message as bytes and sends it using the `_lzSend` internal function.\",\"params\":{\"_dstEid\":\"The endpoint ID of the destination chain.\",\"_message\":\"The message string to be sent.\",\"_options\":\"Additional options for message execution.\"},\"returns\":{\"receipt\":\"A `MessagingReceipt` struct containing details of the message sent.\"}},\"sendMarketResult(uint256)\":{\"params\":{\"marketId\":\"The ID of the market to send\"},\"returns\":{\"receipt\":\"The messaging receipt\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quote(uint32,string,bytes,bool)\":{\"notice\":\"Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token.\"},\"send(uint32,string,bytes)\":{\"notice\":\"Sends a message from the source chain to a destination chain.\"},\"sendMarketResult(uint256)\":{\"notice\":\"Sends a market result to Flow network\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SepoliaContract.sol\":\"SepoliaContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@uma/core/contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/optimistic-oracle-v2/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleV2Interface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    struct RequestSettings {\\n        bool eventBased; // True if the request is set to be event-based.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\n     * @dev Calling this method has a few impacts on the request:\\n     *\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\n     *    with the request.\\n     *\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\n     *    prematurely proposes a response loses their bond.\\n     *\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\n     *    the requesting contract.\\n     *\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setEventBased(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets which callbacks should be enabled for the request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\n     */\\n    function setCallbacks(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        bool callbackOnPriceProposed,\\n        bool callbackOnPriceDisputed,\\n        bool callbackOnPriceSettled\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xfd8657b45e330608fd1978812dfc1923ef157624d9f2d4b2c555f57f6234ea6f\",\"license\":\"AGPL-3.0-only\"},\"contracts/SepoliaContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { OptimisticOracleV2Interface } from \\\"@uma/core/contracts/optimistic-oracle-v2/interfaces/OptimisticOracleV2Interface.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint256) external;\\n    function balanceOf(address) external view returns (uint256);\\n    function approve(address, uint256) external returns (bool);\\n}\\n\\ncontract SepoliaContract is OApp, OAppOptionsType3 {\\n    address constant WETH_ADDRESS = 0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9;\\n    IWETH public weth = IWETH(WETH_ADDRESS);\\n    OptimisticOracleV2Interface oo = OptimisticOracleV2Interface(0x9f1263B8f0355673619168b5B8c0248f1d03e88C);\\n    \\n    bytes32 public constant identifier = bytes32(\\\"MULTIPLE_CHOICE_QUERY\\\");\\n    \\n    // Constants for handling TOO_EARLY_RESPONSE\\n    int256 public constant TOO_EARLY_RESPONSE = type(int256).min;\\n    int256 public constant NO_ANSWER_POSSIBLE = type(int256).max;\\n    \\n    string public data = \\\"Nothing received yet.\\\";\\n\\n    // Market struct\\n    struct Market {\\n        uint256 marketId;\\n        uint256 reward;\\n        uint256 bond;\\n        bytes questionText;\\n        uint256 verificationTime;\\n        uint256 optionCount;\\n        bool isResolved;\\n        int256 outcome;\\n        uint256 requestTime;\\n        bool exists;\\n        bool isEventBased;\\n    }\\n\\n    mapping(uint256 => Market) public markets;\\n    uint256 public marketCount;\\n\\n    // Events\\n    event MarketCreated(uint256 indexed marketId, uint256 reward, uint256 bond, bytes questionText);\\n    event OracleRequestCreated(uint256 indexed marketId, bytes questionText, uint256 timestamp);\\n    event MarketSettled(uint256 indexed marketId, int256 outcome);\\n    event ResultSent(uint256 indexed marketId, int256 outcome, uint32 dstEid);\\n\\n    // Store Flow endpoint ID for return messages\\n    uint32 private flowEndpointId = 30401; // Flow testnet EID\\n\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) Ownable(_delegate) {}\\n\\n    receive() external payable {\\n        weth.deposit{value: msg.value}();\\n    }\\n\\n    function depositETH() external payable {\\n        weth.deposit{value: msg.value}();\\n    }\\n\\n    // Instead of receiving markets, we now create them directly\\n    function createMarket(\\n        uint256 marketId, \\n        uint256 reward, \\n        uint256 bond, \\n        string memory jsonQuestion,\\n        uint256 verificationTime,\\n        uint256 optionCount\\n    ) external {\\n        require(!markets[marketId].exists, \\\"Market already exists\\\");\\n        require(verificationTime >= 360, \\\"Verification time too short\\\"); // 6 minutes minimum\\n        require(verificationTime <= 86400, \\\"Verification time too long\\\"); // 24 hours maximum\\n        require(optionCount >= 2, \\\"At least 2 options required\\\");\\n        require(reward > 0 && bond > 0, \\\"Invalid reward or bond\\\");\\n\\n        Market storage market = markets[marketId];\\n        market.marketId = marketId;\\n        market.reward = reward;\\n        market.bond = bond;\\n        market.questionText = bytes(jsonQuestion);\\n        market.verificationTime = verificationTime;\\n        market.optionCount = optionCount;\\n        market.isResolved = false;\\n        market.outcome = -1;\\n        market.exists = true;\\n        market.isEventBased = true; // Make all markets event-based by default\\n\\n        if (marketId > marketCount) {\\n            marketCount = marketId;\\n        }\\n\\n        emit MarketCreated(marketId, reward, bond, bytes(jsonQuestion));\\n    }\\n\\n    function requestSettlement(uint256 marketId) external {\\n        Market storage market = markets[marketId];\\n        require(market.exists, \\\"Market does not exist\\\");\\n        require(!market.isResolved, \\\"Market already resolved\\\");\\n        require(market.requestTime == 0, \\\"Settlement already requested\\\");\\n        require(weth.balanceOf(address(this)) >= market.bond + market.reward, \\\"Insufficient WETH balance\\\");\\n\\n        // Set request time\\n        market.requestTime = block.timestamp;\\n\\n        // Approve the Oracle to spend the reward and bond\\n        require(weth.approve(address(oo), market.bond + market.reward), \\\"WETH approval failed\\\");\\n\\n        // Request price from UMA\\n        oo.requestPrice(\\n            identifier,\\n            market.requestTime,\\n            market.questionText,\\n            IERC20(WETH_ADDRESS),\\n            market.reward\\n        );\\n\\n        // Set the bond\\n        oo.setBond(\\n            identifier,\\n            market.requestTime,\\n            market.questionText,\\n            market.bond\\n        );\\n\\n        // Set custom liveness\\n        oo.setCustomLiveness(\\n            identifier,\\n            market.requestTime,\\n            market.questionText,\\n            market.verificationTime\\n        );\\n        \\n        // Set as event-based to allow recurring automation\\n        if (market.isEventBased) {\\n            oo.setEventBased(\\n                identifier,\\n                market.requestTime,\\n                market.questionText\\n            );\\n            \\n            // Set callback on price settled to handle TOO_EARLY_RESPONSE\\n            oo.setCallbacks(\\n                identifier,\\n                market.requestTime,\\n                market.questionText,\\n                false, // Don't set callback on priceProposed\\n                false, // Don't set callback on priceDisputed\\n                true   // DO set callback on priceSettled\\n            );\\n        }\\n\\n        emit OracleRequestCreated(marketId, market.questionText, market.requestTime);\\n    }\\n\\n    function settleMarket(uint256 marketId) external payable {\\n        Market storage market = markets[marketId];\\n        require(market.exists, \\\"Market does not exist\\\");\\n        require(!market.isResolved, \\\"Market already resolved\\\");\\n        require(market.requestTime > 0, \\\"Settlement not requested\\\");\\n        require(\\n            block.timestamp >= market.requestTime + market.verificationTime,\\n            \\\"Verification time not passed\\\"\\n        );\\n\\n        // Get result from UMA\\n        int256 result;\\n        \\n        try oo.getRequest(\\n            address(this),\\n            identifier,\\n            market.requestTime,\\n            market.questionText\\n        ) returns (OptimisticOracleV2Interface.Request memory request) {\\n            result = request.resolvedPrice;\\n        } catch {\\n            revert(\\\"Failed to get oracle response\\\");\\n        }\\n\\n        // Check if the result is a special value\\n        if (result == TOO_EARLY_RESPONSE) {\\n            revert(\\\"Oracle response: Too early to determine result\\\");\\n        } else if (result == NO_ANSWER_POSSIBLE) {\\n            revert(\\\"Oracle response: No answer possible\\\");\\n        }\\n\\n        // Ensure the result is a valid option index\\n        require(\\n            result >= 0 && uint256(result) < market.optionCount,\\n            \\\"Invalid option index from oracle\\\"\\n        );\\n\\n        market.isResolved = true;\\n        market.outcome = result;\\n\\n        emit MarketSettled(marketId, result);\\n    }\\n\\n    /**\\n     * @notice Sends a message from the source chain to a destination chain.\\n     * @param _dstEid The endpoint ID of the destination chain.\\n     * @param _message The message string to be sent.\\n     * @param _options Additional options for message execution.\\n     * @dev Encodes the message as bytes and sends it using the `_lzSend` internal function.\\n     * @return receipt A `MessagingReceipt` struct containing details of the message sent.\\n     */\\n    function send(\\n        uint32 _dstEid,\\n        string memory _message,\\n        bytes calldata _options\\n    ) external payable returns (MessagingReceipt memory receipt) {\\n        bytes memory _payload = abi.encode(_message);\\n        receipt = _lzSend(_dstEid, _payload, _options, MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token.\\n     * @param _dstEid Destination chain's endpoint ID.\\n     * @param _message The message.\\n     * @param _options Message execution options (e.g., for sending gas to destination).\\n     * @param _payInLzToken Whether to return fee in ZRO token.\\n     * @return fee A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token.\\n     */\\n    function quote(\\n        uint32 _dstEid,\\n        string memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) public view returns (MessagingFee memory fee) {\\n        bytes memory payload = abi.encode(_message);\\n        fee = _quote(_dstEid, payload, _options, _payInLzToken);\\n    }\\n\\n    /**\\n     * @dev Internal function override to handle incoming messages from another chain.\\n     * @dev _origin A struct containing information about the message sender.\\n     * @dev _guid A unique global packet identifier for the message.\\n     * @param payload The encoded message payload being received.\\n     *\\n     * @dev The following params are unused in the current implementation of the OApp.\\n     * @dev _executor The address of the Executor responsible for processing the message.\\n     * @dev _extraData Arbitrary data appended by the Executor to the message.\\n     *\\n     * Decodes the received payload and processes it as per the business logic defined in the function.\\n     */\\n    function _lzReceive(\\n        Origin calldata /*_origin*/,\\n        bytes32 /*_guid*/,\\n        bytes calldata payload,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override {\\n        data = abi.decode(payload, (string));\\n    }\\n\\n    function getMarket(uint256 marketId) external view returns (\\n        uint256 _marketId,\\n        uint256 reward,\\n        uint256 bond,\\n        bytes memory questionText,\\n        uint256 verificationTime,\\n        uint256 optionCount,\\n        bool isResolved,\\n        int256 outcome,\\n        uint256 _requestTime,\\n        bool exists\\n    ) {\\n        Market storage market = markets[marketId];\\n        require(market.exists, \\\"Market does not exist\\\");\\n        return (\\n            market.marketId,\\n            market.reward,\\n            market.bond,\\n            market.questionText,\\n            market.verificationTime,\\n            market.optionCount,\\n            market.isResolved,\\n            market.outcome,\\n            market.requestTime,\\n            market.exists\\n        );\\n    }\\n\\n    function getWETHBalance() external view returns (uint256) {\\n        return weth.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Sends a market result to Flow network\\n     * @param marketId The ID of the market to send\\n     * @return receipt The messaging receipt\\n     */\\n    function sendMarketResult(uint256 marketId) external payable returns (MessagingReceipt memory receipt) {\\n        Market storage market = markets[marketId];\\n        require(market.exists, \\\"Market does not exist\\\");\\n        require(market.isResolved, \\\"Market not yet resolved\\\");\\n        \\n        // Format the market data as JSON string for sending to Flow\\n        string memory marketData = formatMarketForMessage(marketId, market.outcome);\\n        \\n        // Send the formatted market data to Flow\\n        receipt = _lzSend(\\n            flowEndpointId, \\n            abi.encode(marketData),\\n            new bytes(0), // Default empty options\\n            MessagingFee(msg.value, 0),\\n            payable(msg.sender)\\n        );\\n        \\n        emit ResultSent(marketId, market.outcome, flowEndpointId);\\n        \\n        return receipt;\\n    }\\n    \\n    /**\\n     * @notice Formats market data as a JSON string for cross-chain messaging\\n     * @param marketId The ID of the market\\n     * @param outcome The outcome of the market\\n     * @return A formatted string with market data\\n     */\\n    function formatMarketForMessage(uint256 marketId, int256 outcome) internal view returns (string memory) {\\n        Market storage market = markets[marketId];\\n        \\n        // Create a JSON string with essential market data\\n        return string(\\n            abi.encodePacked(\\n                '{\\\"marketId\\\":', uintToString(marketId),\\n                ',\\\"outcome\\\":', intToString(outcome),\\n                ',\\\"resolved\\\":true}'\\n            )\\n        );\\n    }\\n    \\n    /**\\n     * @notice Converts an int256 to a string\\n     * @param value The int256 value to convert\\n     * @return String representation of the int\\n     */\\n    function intToString(int256 value) internal pure returns (string memory) {\\n        if (value < 0) {\\n            return string(abi.encodePacked(\\\"-\\\", uintToString(uint256(-value))));\\n        }\\n        return uintToString(uint256(value));\\n    }\\n    \\n    /**\\n     * @notice Converts a uint256 to a string\\n     * @param value The uint256 value to convert\\n     * @return String representation of the uint\\n     */\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0xcffd72fd25531f9a2f95da7947a8e76e336449ac09ac5b89338ff7e0c3daa2dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600380546001600160a01b0319908116737b79995e5f793a07bc00c21412e50ecae098e7f91790915560048054909116739f1263b8f0355673619168b5b8c0248f1d03e88c17905560e0604052601560a09081527f4e6f7468696e67207265636569766564207965742e000000000000000000000060c0526005906200008690826200029a565b506008805463ffffffff19166176c1179055348015620000a557600080fd5b506040516200388e3803806200388e833981016040819052620000c89162000383565b81818181806001600160a01b038116620000fc57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200010781620001a3565b506001600160a01b0380831660805281166200013657604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b1580156200017e57600080fd5b505af115801562000193573d6000803e3d6000fd5b50505050505050505050620003bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021e57607f821691505b6020821081036200023f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000295576000816000526020600020601f850160051c81016020861015620002705750805b601f850160051c820191505b8181101562000291578281556001016200027c565b5050505b505050565b81516001600160401b03811115620002b657620002b6620001f3565b620002ce81620002c7845462000209565b8462000245565b602080601f831160018114620003065760008415620002ed5750858301515b600019600386901b1c1916600185901b17855562000291565b600085815260208120601f198616915b82811015620003375788860151825594840194600190910190840162000316565b5085821015620003565787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160a01b03811681146200037e57600080fd5b919050565b600080604083850312156200039757600080fd5b620003a28362000366565b9150620003b26020840162000366565b90509250929050565b60805161348d620004016000396000818161035a015281816106e501528181610b6f01528181611df801528181611f320152818161202901526120e2015261348d6000f3fe6080604052600436106101db5760003560e01c8063b98bd07011610102578063ec97908211610095578063f6326fb311610064578063f6326fb314610604578063f77e5dd31461060c578063ff7bd03d14610639578063ff8c1a8c1461065957600080fd5b8063ec9790821461059b578063edcc7566146105b1578063f2fde38b146105c4578063f4fc6cdb146105e457600080fd5b8063db0b569e116100d1578063db0b569e14610512578063dead940114610525578063e0539e5814610545578063eb44fdd31461056557600080fd5b8063b98bd07014610485578063bb0b6a53146104a5578063bc70b354146104d2578063ca5eb5e1146104f257600080fd5b80635e280f111161017a5780637d25a05e116101495780637d25a05e146103c857806382413eac146104005780638da5cb5b14610430578063b1283e771461044e57600080fd5b80635e280f1114610348578063715018a61461037c57806373d4a13a146103915780637998a1c4146103a657600080fd5b806317442b70116101b657806317442b70146102a15780633400288b146102c35780633fc8cef3146102e35780635535d4611461031b57600080fd5b8062cbb73b1461024b5780631125fa731461027357806313137d651461028e57600080fd5b3661024657600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561023057600080fd5b505af1158015610244573d6000803e3d6000fd5b005b600080fd5b34801561025757600080fd5b50610260610671565b6040519081526020015b60405180910390f35b34801561027f57600080fd5b506102606001600160ff1b0381565b61024461029c3660046123df565b6106e3565b3480156102ad57600080fd5b506040805160018152600260208201520161026a565b3480156102cf57600080fd5b506102446102de366004612497565b6107a3565b3480156102ef57600080fd5b50600354610303906001600160a01b031681565b6040516001600160a01b03909116815260200161026a565b34801561032757600080fd5b5061033b6103363660046124d3565b6107b9565b60405161026a9190612556565b34801561035457600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b34801561038857600080fd5b5061024461085e565b34801561039d57600080fd5b5061033b610872565b3480156103b257600080fd5b5061026060008051602061343883398151915281565b3480156103d457600080fd5b506103e86103e3366004612497565b61087f565b6040516001600160401b03909116815260200161026a565b34801561040c57600080fd5b5061042061041b366004612570565b610888565b604051901515815260200161026a565b34801561043c57600080fd5b506000546001600160a01b0316610303565b34801561045a57600080fd5b5061046e6104693660046125d6565b61089d565b60405161026a9b9a999897969594939291906125ef565b34801561049157600080fd5b506102446104a0366004612656565b610986565b3480156104b157600080fd5b506102606104c03660046126ca565b60016020526000908152604090205481565b3480156104de57600080fd5b5061033b6104ed3660046126e5565b6109a0565b3480156104fe57600080fd5b5061024461050d366004612745565b610b48565b6102446105203660046125d6565b610bce565b34801561053157600080fd5b50610244610540366004612862565b610f62565b6105586105533660046128cd565b6111bf565b60405161026a9190612937565b34801561057157600080fd5b506105856105803660046125d6565b611248565b60405161026a9a99989796959493929190612979565b3480156105a757600080fd5b5061026060075481565b6105586105bf3660046125d6565b611379565b3480156105d057600080fd5b506102446105df366004612745565b6114ba565b3480156105f057600080fd5b506102446105ff3660046125d6565b6114f8565b610244611a8c565b34801561061857600080fd5b5061062c6106273660046129e6565b611adc565b60405161026a9190612a61565b34801561064557600080fd5b50610420610654366004612a78565b611b20565b34801561066557600080fd5b50610260600160ff1b81565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190612a94565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610733576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061074d90610748908a6126ca565b611b56565b1461078b5761075f60208801886126ca565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161072a565b61079a87878787878787611b92565b50505050505050565b6107ab611bb5565b6107b58282611be2565b5050565b6002602090815260009283526040808420909152908252902080546107dd90612aad565b80601f016020809104026020016040519081016040528092919081815260200182805461080990612aad565b80156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b505050505081565b610866611bb5565b6108706000611c37565b565b600580546107dd90612aad565b60005b92915050565b6001600160a01b03811630145b949350505050565b6006602052600090815260409020805460018201546002830154600384018054939492939192916108cd90612aad565b80601f01602080910402602001604051908101604052809291908181526020018280546108f990612aad565b80156109465780601f1061091b57610100808354040283529160200191610946565b820191906000526020600020905b81548152906001019060200180831161092957829003601f168201915b505050600484015460058501546006860154600787015460088801546009909801549697939692955060ff9182169450929180821691610100909104168b565b61098e611bb5565b6107b561099b8284612ae1565b611c87565b63ffffffff8416600090815260026020908152604080832061ffff871684529091528120805460609291906109d490612aad565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0090612aad565b8015610a4d5780601f10610a2257610100808354040283529160200191610a4d565b820191906000526020600020905b815481529060010190602001808311610a3057829003601f168201915b505050505090508051600003610a9d5783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506108959350505050565b6000839003610aad579050610895565b60028310610b2b57610af484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d9992505050565b80610b028460028188612bb6565b604051602001610b1493929190612be0565b604051602081830303815290604052915050610895565b8383604051639a6d49cd60e01b815260040161072a929190612c08565b610b50611bb5565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610bb357600080fd5b505af1158015610bc7573d6000803e3d6000fd5b5050505050565b6000818152600660205260409020600981015460ff16610c005760405162461bcd60e51b815260040161072a90612c37565b600681015460ff1615610c4f5760405162461bcd60e51b815260206004820152601760248201527613585c9ad95d08185b1c9958591e481c995cdbdb1d9959604a1b604482015260640161072a565b6000816008015411610ca35760405162461bcd60e51b815260206004820152601860248201527f536574746c656d656e74206e6f74207265717565737465640000000000000000604482015260640161072a565b80600401548160080154610cb79190612c7c565b421015610d065760405162461bcd60e51b815260206004820152601c60248201527f566572696669636174696f6e2074696d65206e6f742070617373656400000000604482015260640161072a565b60048054600883015460405163a9904f9b60e01b81526000936001600160a01b039093169263a9904f9b92610d53923092600080516020613438833981519152929160038a019101612d0c565b61020060405180830381865afa925050508015610d8d575060408051601f3d908101601f19168201909252610d8a91810190612dfd565b60015b610dd95760405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f20676574206f7261636c6520726573706f6e7365000000604482015260640161072a565b60c001519050600160ff1b8103610e495760405162461bcd60e51b815260206004820152602e60248201527f4f7261636c6520726573706f6e73653a20546f6f206561726c7920746f20646560448201526d1d195c9b5a5b99481c995cdd5b1d60921b606482015260840161072a565b6001600160ff1b038103610eab5760405162461bcd60e51b815260206004820152602360248201527f4f7261636c6520726573706f6e73653a204e6f20616e7377657220706f737369604482015262626c6560e81b606482015260840161072a565b60008112158015610ebf5750816005015481105b610f0b5760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964206f7074696f6e20696e6465782066726f6d206f7261636c65604482015260640161072a565b60068201805460ff191660011790556007820181905560405183907fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e90610f559084815260200190565b60405180910390a2505050565b60008681526006602052604090206009015460ff1615610fbc5760405162461bcd60e51b81526020600482015260156024820152744d61726b657420616c72656164792065786973747360581b604482015260640161072a565b61016882101561100e5760405162461bcd60e51b815260206004820152601b60248201527f566572696669636174696f6e2074696d6520746f6f2073686f72740000000000604482015260640161072a565b620151808211156110615760405162461bcd60e51b815260206004820152601a60248201527f566572696669636174696f6e2074696d6520746f6f206c6f6e67000000000000604482015260640161072a565b60028110156110b25760405162461bcd60e51b815260206004820152601b60248201527f4174206c656173742032206f7074696f6e732072657175697265640000000000604482015260640161072a565b6000851180156110c25750600084115b6111075760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081c995dd85c99081bdc88189bdb9960521b604482015260640161072a565b60008681526006602052604090208681556001810186905560028101859055600381016111348582612ef9565b50600481018390556005810182905560068101805460ff1916905560001960078083019190915560098201805461ffff19166101011790555487111561117a5760078790555b867f24f820b288b9e0d4966fec47bd5c7c974b08f8f155fe8a31fa3fbf95f4d7d7768787876040516111ae93929190612fb8565b60405180910390a250505050505050565b6111c7612323565b6000846040516020016111da9190612556565b60408051601f198184030181526020601f8701819004810284018101909252858352925061123e918891849190889088908190840183828082843760009201829052506040805180820190915234815260208101919091529250339150611dc59050565b9695505050505050565b60008181526006602052604081206009810154829182916060918391829182918291829182919060ff1661128e5760405162461bcd60e51b815260040161072a90612c37565b80546001820154600283015460048401546005850154600686015460078701546008880154600989015460038a0180549096959460ff908116949392169087906112d790612aad565b80601f016020809104026020016040519081016040528092919081815260200182805461130390612aad565b80156113505780601f1061132557610100808354040283529160200191611350565b820191906000526020600020905b81548152906001019060200180831161133357829003601f168201915b505050505096509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b611381612323565b6000828152600660205260409020600981015460ff166113b35760405162461bcd60e51b815260040161072a90612c37565b600681015460ff166114075760405162461bcd60e51b815260206004820152601760248201527f4d61726b6574206e6f7420796574207265736f6c766564000000000000000000604482015260640161072a565b6000611417848360070154611ed0565b6008546040519192506114679163ffffffff9091169061143b908490602001612556565b60408051601f198184030181526000808452606084018352346020850190815292840152919033611dc5565b60078301546008546040805192835263ffffffff909116602083015291945085917fc88402aebbfa5f5c11d0e92085e0c6640ae522437553f29b72edbe604a0a7e11910160405180910390a25050919050565b6114c2611bb5565b6001600160a01b0381166114ec57604051631e4fbdf760e01b81526000600482015260240161072a565b6114f581611c37565b50565b6000818152600660205260409020600981015460ff1661152a5760405162461bcd60e51b815260040161072a90612c37565b600681015460ff16156115795760405162461bcd60e51b815260206004820152601760248201527613585c9ad95d08185b1c9958591e481c995cdbdb1d9959604a1b604482015260640161072a565b6008810154156115cb5760405162461bcd60e51b815260206004820152601c60248201527f536574746c656d656e7420616c72656164792072657175657374656400000000604482015260640161072a565b806001015481600201546115df9190612c7c565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b9190612a94565b10156116995760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420574554482062616c616e636500000000000000604482015260640161072a565b426008820155600354600454600183015460028401546001600160a01b039384169363095ea7b39316916116cc91612c7c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190612fd7565b61177e5760405162461bcd60e51b815260206004820152601460248201527315d1551208185c1c1c9bdd985b0819985a5b195960621b604482015260640161072a565b60048054600883015460018401546040516311df92f160e01b81526001600160a01b03909316936311df92f1936117e3936000805160206134388339815191529390926003890192737b79995e5f793a07bc00c21412e50ecae098e7f9929101612ff4565b6020604051808303816000875af1158015611802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118269190612a94565b5060048054600883015460028401546040516356ad3aad60e11b81526001600160a01b039093169363ad5a755a9361187593600080516020613438833981519152939092600389019201613030565b6020604051808303816000875af1158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190612a94565b506004805460088301548383015460405163239e22ff60e11b81526001600160a01b039093169363473c45fe9361190693600080516020613438833981519152939092600389019201613030565b600060405180830381600087803b15801561192057600080fd5b505af1158015611934573d6000803e3d6000fd5b505050506009810154610100900460ff1615611a475760048054600883015460405163120698af60e01b81526001600160a01b039092169263120698af9261199392600080516020613438833981519152929091600388019101613060565b600060405180830381600087803b1580156119ad57600080fd5b505af11580156119c1573d6000803e3d6000fd5b505060048054600885015460405163f327b07560e01b81526001600160a01b03909216945063f327b0759350611a149260008051602061343883398151915292600388019160009182916001910161307f565b600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050505b817f1bac1f5e61d784f9a7419341739a059a77d9e9402717546a273a13197ac71706826003018360080154604051611a809291906130be565b60405180910390a25050565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bb357600080fd5b6040805180820190915260008082526020820152600084604051602001611b039190612556565b604051602081830303815290604052905061123e86828686611f1c565b6000602082018035906001908390611b3890866126ca565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806108825760405163f6ff4fb760e01b815263ffffffff8416600482015260240161072a565b611b9e848601866130e0565b600590611bab9082612ef9565b5050505050505050565b6000546001600160a01b031633146108705760405163118cdaa760e01b815233600482015260240161072a565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8151811015611d5e57611cb9828281518110611ca857611ca8613114565b602002602001015160400151611d99565b818181518110611ccb57611ccb613114565b60200260200101516040015160026000848481518110611ced57611ced613114565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611d2757611d27613114565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611d559190612ef9565b50600101611c8a565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b67481604051611d8e919061312a565b60405180910390a150565b600281015161ffff81166003146107b55781604051639a6d49cd60e01b815260040161072a9190612556565b611dcd612323565b6000611ddc8460000151611ffd565b602085015190915015611df657611df68460200151612025565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001611e468c611b56565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401611e829291906131b5565b60806040518083038185885af1158015611ea0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611ec5919061327c565b979650505050505050565b6000828152600660205260409020606090611eea84612107565b611ef384612207565b604051602001611f049291906132d2565b60405160208183030381529060405291505092915050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001611f7f89611b56565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611fb49291906131b5565b6040805180830381865afa158015611fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff4919061334f565b95945050505050565b6000813414612021576040516304fb820960e51b815234600482015260240161072a565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015612085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a9919061336b565b90506001600160a01b0381166120d2576040516329b99a9560e11b815260040160405180910390fd5b6107b56001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085612252565b60608160000361212e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612158578061214281613388565b91506121519050600a836133b7565b9150612132565b6000816001600160401b0381111561217257612172612762565b6040519080825280601f01601f19166020018201604052801561219c576020820181803683370190505b5090505b8415610895576121b16001836133cb565b91506121be600a866133de565b6121c9906030612c7c565b60f81b8183815181106121de576121de613114565b60200101906001600160f81b031916908160001a905350612200600a866133b7565b94506121a0565b606060008212156122495761222361221e836133f2565b612107565b604051602001612233919061340e565b6040516020818303038152906040529050919050565b61088282612107565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526122ac9085906122b2565b50505050565b600080602060008451602086016000885af1806122d5576040513d6000823e3d81fd5b50506000513d915081156122ed5780600114156122fa565b6001600160a01b0384163b155b156122ac57604051635274afe760e01b81526001600160a01b038516600482015260240161072a565b60405180606001604052806000801916815260200160006001600160401b03168152602001612365604051806040016040528060008152602001600081525090565b905290565b60006060828403121561237c57600080fd5b50919050565b60008083601f84011261239457600080fd5b5081356001600160401b038111156123ab57600080fd5b6020830191508360208285010111156123c357600080fd5b9250929050565b6001600160a01b03811681146114f557600080fd5b600080600080600080600060e0888a0312156123fa57600080fd5b612404898961236a565b96506060880135955060808801356001600160401b038082111561242757600080fd5b6124338b838c01612382565b909750955060a08a01359150612448826123ca565b90935060c0890135908082111561245e57600080fd5b5061246b8a828b01612382565b989b979a50959850939692959293505050565b803563ffffffff8116811461249257600080fd5b919050565b600080604083850312156124aa57600080fd5b6124b38361247e565b946020939093013593505050565b803561ffff8116811461249257600080fd5b600080604083850312156124e657600080fd5b6124ef8361247e565b91506124fd602084016124c1565b90509250929050565b60005b83811015612521578181015183820152602001612509565b50506000910152565b60008151808452612542816020860160208601612506565b601f01601f19169290920160200192915050565b602081526000612569602083018461252a565b9392505050565b60008060008060a0858703121561258657600080fd5b612590868661236a565b935060608501356001600160401b038111156125ab57600080fd5b6125b787828801612382565b90945092505060808501356125cb816123ca565b939692955090935050565b6000602082840312156125e857600080fd5b5035919050565b60006101608d83528c60208401528b60408401528060608401526126158184018c61252a565b608084019a909a52505060a081019690965293151560c086015260e08501929092526101008401521515610120830152151561014090910152949350505050565b6000806020838503121561266957600080fd5b82356001600160401b038082111561268057600080fd5b818501915085601f83011261269457600080fd5b8135818111156126a357600080fd5b8660208260051b85010111156126b857600080fd5b60209290920196919550909350505050565b6000602082840312156126dc57600080fd5b6125698261247e565b600080600080606085870312156126fb57600080fd5b6127048561247e565b9350612712602086016124c1565b925060408501356001600160401b0381111561272d57600080fd5b61273987828801612382565b95989497509550505050565b60006020828403121561275757600080fd5b8135612569816123ca565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561279a5761279a612762565b60405290565b60405161014081016001600160401b038111828210171561279a5761279a612762565b604051601f8201601f191681016001600160401b03811182821017156127eb576127eb612762565b604052919050565b600082601f83011261280457600080fd5b81356001600160401b0381111561281d5761281d612762565b612830601f8201601f19166020016127c3565b81815284602083860101111561284557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561287b57600080fd5b86359550602087013594506040870135935060608701356001600160401b038111156128a657600080fd5b6128b289828a016127f3565b9350506080870135915060a087013590509295509295509295565b600080600080606085870312156128e357600080fd5b6128ec8561247e565b935060208501356001600160401b038082111561290857600080fd5b612914888389016127f3565b9450604087013591508082111561292a57600080fd5b5061273987828801612382565b6000608082019050825182526001600160401b0360208401511660208301526040830151612972604084018280518252602090810151910152565b5092915050565b60006101408c83528b60208401528a604084015280606084015261299f8184018b61252a565b6080840199909952505060a081019590955292151560c085015260e0840191909152610100830152151561012090910152949350505050565b80151581146114f557600080fd5b600080600080608085870312156129fc57600080fd5b612a058561247e565b935060208501356001600160401b0380821115612a2157600080fd5b612a2d888389016127f3565b94506040870135915080821115612a4357600080fd5b50612a50878288016127f3565b92505060608501356125cb816129d8565b815181526020808301519082015260408101610882565b600060608284031215612a8a57600080fd5b612569838361236a565b600060208284031215612aa657600080fd5b5051919050565b600181811c90821680612ac157607f821691505b60208210810361237c57634e487b7160e01b600052602260045260246000fd5b60006001600160401b0380841115612afb57612afb612762565b8360051b6020612b0c8183016127c3565b868152918501918181019036841115612b2457600080fd5b865b84811015612baa57803586811115612b3e5760008081fd5b88016060368290031215612b525760008081fd5b612b5a612778565b612b638261247e565b8152612b708683016124c1565b8682015260408083013589811115612b885760008081fd5b612b94368286016127f3565b9183019190915250845250918301918301612b26565b50979650505050505050565b60008085851115612bc657600080fd5b83861115612bd357600080fd5b5050820193919092039150565b60008451612bf2818460208901612506565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526015908201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561088257610882612c66565b60008154612c9c81612aad565b808552602060018381168015612cb95760018114612cd357612d01565b60ff1985168884015283151560051b880183019550612d01565b866000528260002060005b85811015612cf95781548a8201860152908301908401612cde565b890184019650505b505050505092915050565b60018060a01b038516815283602082015282604082015260806060820152600061123e6080830184612c8f565b8051612492816123ca565b8051612492816129d8565b600060e08284031215612d6157600080fd5b60405160e081018181106001600160401b0382111715612d8357612d83612762565b80604052508091508251612d96816129d8565b81526020830151612da6816129d8565b60208201526040830151612db9816129d8565b60408201526060830151612dcc816129d8565b6060820152612ddd60808401612d44565b608082015260a083015160a082015260c083015160c08201525092915050565b60006102008284031215612e1057600080fd5b612e186127a0565b612e2183612d39565b8152612e2f60208401612d39565b6020820152612e4060408401612d39565b6040820152612e5160608401612d44565b6060820152612e638460808501612d4f565b608082015261016083015160a082015261018083015160c08201526101a083015160e08201526101c08301516101008201526101e09092015161012083015250919050565b601f821115612ef4576000816000526020600020601f850160051c81016020861015612ed15750805b601f850160051c820191505b81811015612ef057828155600101612edd565b5050505b505050565b81516001600160401b03811115612f1257612f12612762565b612f2681612f208454612aad565b84612ea8565b602080601f831160018114612f5b5760008415612f435750858301515b600019600386901b1c1916600185901b178555612ef0565b600085815260208120601f198616915b82811015612f8a57888601518255948401946001909101908401612f6b565b5085821015612fa85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152826020820152606060408201526000611ff4606083018461252a565b600060208284031215612fe957600080fd5b8151612569816129d8565b85815284602082015260a06040820152600061301360a0830186612c8f565b6001600160a01b0394909416606083015250608001529392505050565b84815283602082015260806040820152600061304f6080830185612c8f565b905082606083015295945050505050565b838152826020820152606060408201526000611ff46060830184612c8f565b86815285602082015260c06040820152600061309e60c0830187612c8f565b9415156060830152509115156080830152151560a0909101529392505050565b6040815260006130d16040830185612c8f565b90508260208301529392505050565b6000602082840312156130f257600080fd5b81356001600160401b0381111561310857600080fd5b610895848285016127f3565b634e487b7160e01b600052603260045260246000fd5b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156131a757888303603f190185528151805163ffffffff1684528781015161ffff168885015286015160608785018190526131938186018361252a565b968901969450505090860190600101613153565b509098975050505050505050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526131eb60e084018261252a565b90506060850151603f198483030160a0850152613208828261252a565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561324057600080fd5b604051604081018181106001600160401b038211171561326257613262612762565b604052825181526020928301519281019290925250919050565b60006080828403121561328e57600080fd5b613296612778565b8251815260208301516001600160401b03811681146132b457600080fd5b60208201526132c6846040850161322e565b60408201529392505050565b6b3d9136b0b935b2ba24b2111d60a11b815282516000906132fa81600c850160208801612506565b6a161137baba31b7b6b2911d60a91b600c918401918201528351613325816017840160208801612506565b702c227265736f6c766564223a747275657d60781b60179290910191820152602801949350505050565b60006040828403121561336157600080fd5b612569838361322e565b60006020828403121561337d57600080fd5b8151612569816123ca565b60006001820161339a5761339a612c66565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826133c6576133c66133a1565b500490565b8181038181111561088257610882612c66565b6000826133ed576133ed6133a1565b500690565b6000600160ff1b820161340757613407612c66565b5060000390565b602d60f81b81526000825161342a816001850160208701612506565b919091016001019291505056fe4d554c5449504c455f43484f4943455f51554552590000000000000000000000a264697066735822122036b32fb7531c1a496faa0fbb1be97a60c227424106a778478aba56ab2c18a6ed64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101db5760003560e01c8063b98bd07011610102578063ec97908211610095578063f6326fb311610064578063f6326fb314610604578063f77e5dd31461060c578063ff7bd03d14610639578063ff8c1a8c1461065957600080fd5b8063ec9790821461059b578063edcc7566146105b1578063f2fde38b146105c4578063f4fc6cdb146105e457600080fd5b8063db0b569e116100d1578063db0b569e14610512578063dead940114610525578063e0539e5814610545578063eb44fdd31461056557600080fd5b8063b98bd07014610485578063bb0b6a53146104a5578063bc70b354146104d2578063ca5eb5e1146104f257600080fd5b80635e280f111161017a5780637d25a05e116101495780637d25a05e146103c857806382413eac146104005780638da5cb5b14610430578063b1283e771461044e57600080fd5b80635e280f1114610348578063715018a61461037c57806373d4a13a146103915780637998a1c4146103a657600080fd5b806317442b70116101b657806317442b70146102a15780633400288b146102c35780633fc8cef3146102e35780635535d4611461031b57600080fd5b8062cbb73b1461024b5780631125fa731461027357806313137d651461028e57600080fd5b3661024657600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561023057600080fd5b505af1158015610244573d6000803e3d6000fd5b005b600080fd5b34801561025757600080fd5b50610260610671565b6040519081526020015b60405180910390f35b34801561027f57600080fd5b506102606001600160ff1b0381565b61024461029c3660046123df565b6106e3565b3480156102ad57600080fd5b506040805160018152600260208201520161026a565b3480156102cf57600080fd5b506102446102de366004612497565b6107a3565b3480156102ef57600080fd5b50600354610303906001600160a01b031681565b6040516001600160a01b03909116815260200161026a565b34801561032757600080fd5b5061033b6103363660046124d3565b6107b9565b60405161026a9190612556565b34801561035457600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b34801561038857600080fd5b5061024461085e565b34801561039d57600080fd5b5061033b610872565b3480156103b257600080fd5b5061026060008051602061343883398151915281565b3480156103d457600080fd5b506103e86103e3366004612497565b61087f565b6040516001600160401b03909116815260200161026a565b34801561040c57600080fd5b5061042061041b366004612570565b610888565b604051901515815260200161026a565b34801561043c57600080fd5b506000546001600160a01b0316610303565b34801561045a57600080fd5b5061046e6104693660046125d6565b61089d565b60405161026a9b9a999897969594939291906125ef565b34801561049157600080fd5b506102446104a0366004612656565b610986565b3480156104b157600080fd5b506102606104c03660046126ca565b60016020526000908152604090205481565b3480156104de57600080fd5b5061033b6104ed3660046126e5565b6109a0565b3480156104fe57600080fd5b5061024461050d366004612745565b610b48565b6102446105203660046125d6565b610bce565b34801561053157600080fd5b50610244610540366004612862565b610f62565b6105586105533660046128cd565b6111bf565b60405161026a9190612937565b34801561057157600080fd5b506105856105803660046125d6565b611248565b60405161026a9a99989796959493929190612979565b3480156105a757600080fd5b5061026060075481565b6105586105bf3660046125d6565b611379565b3480156105d057600080fd5b506102446105df366004612745565b6114ba565b3480156105f057600080fd5b506102446105ff3660046125d6565b6114f8565b610244611a8c565b34801561061857600080fd5b5061062c6106273660046129e6565b611adc565b60405161026a9190612a61565b34801561064557600080fd5b50610420610654366004612a78565b611b20565b34801561066557600080fd5b50610260600160ff1b81565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190612a94565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610733576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061074d90610748908a6126ca565b611b56565b1461078b5761075f60208801886126ca565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161072a565b61079a87878787878787611b92565b50505050505050565b6107ab611bb5565b6107b58282611be2565b5050565b6002602090815260009283526040808420909152908252902080546107dd90612aad565b80601f016020809104026020016040519081016040528092919081815260200182805461080990612aad565b80156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b505050505081565b610866611bb5565b6108706000611c37565b565b600580546107dd90612aad565b60005b92915050565b6001600160a01b03811630145b949350505050565b6006602052600090815260409020805460018201546002830154600384018054939492939192916108cd90612aad565b80601f01602080910402602001604051908101604052809291908181526020018280546108f990612aad565b80156109465780601f1061091b57610100808354040283529160200191610946565b820191906000526020600020905b81548152906001019060200180831161092957829003601f168201915b505050600484015460058501546006860154600787015460088801546009909801549697939692955060ff9182169450929180821691610100909104168b565b61098e611bb5565b6107b561099b8284612ae1565b611c87565b63ffffffff8416600090815260026020908152604080832061ffff871684529091528120805460609291906109d490612aad565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0090612aad565b8015610a4d5780601f10610a2257610100808354040283529160200191610a4d565b820191906000526020600020905b815481529060010190602001808311610a3057829003601f168201915b505050505090508051600003610a9d5783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506108959350505050565b6000839003610aad579050610895565b60028310610b2b57610af484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d9992505050565b80610b028460028188612bb6565b604051602001610b1493929190612be0565b604051602081830303815290604052915050610895565b8383604051639a6d49cd60e01b815260040161072a929190612c08565b610b50611bb5565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610bb357600080fd5b505af1158015610bc7573d6000803e3d6000fd5b5050505050565b6000818152600660205260409020600981015460ff16610c005760405162461bcd60e51b815260040161072a90612c37565b600681015460ff1615610c4f5760405162461bcd60e51b815260206004820152601760248201527613585c9ad95d08185b1c9958591e481c995cdbdb1d9959604a1b604482015260640161072a565b6000816008015411610ca35760405162461bcd60e51b815260206004820152601860248201527f536574746c656d656e74206e6f74207265717565737465640000000000000000604482015260640161072a565b80600401548160080154610cb79190612c7c565b421015610d065760405162461bcd60e51b815260206004820152601c60248201527f566572696669636174696f6e2074696d65206e6f742070617373656400000000604482015260640161072a565b60048054600883015460405163a9904f9b60e01b81526000936001600160a01b039093169263a9904f9b92610d53923092600080516020613438833981519152929160038a019101612d0c565b61020060405180830381865afa925050508015610d8d575060408051601f3d908101601f19168201909252610d8a91810190612dfd565b60015b610dd95760405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f20676574206f7261636c6520726573706f6e7365000000604482015260640161072a565b60c001519050600160ff1b8103610e495760405162461bcd60e51b815260206004820152602e60248201527f4f7261636c6520726573706f6e73653a20546f6f206561726c7920746f20646560448201526d1d195c9b5a5b99481c995cdd5b1d60921b606482015260840161072a565b6001600160ff1b038103610eab5760405162461bcd60e51b815260206004820152602360248201527f4f7261636c6520726573706f6e73653a204e6f20616e7377657220706f737369604482015262626c6560e81b606482015260840161072a565b60008112158015610ebf5750816005015481105b610f0b5760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964206f7074696f6e20696e6465782066726f6d206f7261636c65604482015260640161072a565b60068201805460ff191660011790556007820181905560405183907fca3a568dfb73dd7b7b3c0b28f130edbf4b688f534869c3de083664c43c11430e90610f559084815260200190565b60405180910390a2505050565b60008681526006602052604090206009015460ff1615610fbc5760405162461bcd60e51b81526020600482015260156024820152744d61726b657420616c72656164792065786973747360581b604482015260640161072a565b61016882101561100e5760405162461bcd60e51b815260206004820152601b60248201527f566572696669636174696f6e2074696d6520746f6f2073686f72740000000000604482015260640161072a565b620151808211156110615760405162461bcd60e51b815260206004820152601a60248201527f566572696669636174696f6e2074696d6520746f6f206c6f6e67000000000000604482015260640161072a565b60028110156110b25760405162461bcd60e51b815260206004820152601b60248201527f4174206c656173742032206f7074696f6e732072657175697265640000000000604482015260640161072a565b6000851180156110c25750600084115b6111075760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081c995dd85c99081bdc88189bdb9960521b604482015260640161072a565b60008681526006602052604090208681556001810186905560028101859055600381016111348582612ef9565b50600481018390556005810182905560068101805460ff1916905560001960078083019190915560098201805461ffff19166101011790555487111561117a5760078790555b867f24f820b288b9e0d4966fec47bd5c7c974b08f8f155fe8a31fa3fbf95f4d7d7768787876040516111ae93929190612fb8565b60405180910390a250505050505050565b6111c7612323565b6000846040516020016111da9190612556565b60408051601f198184030181526020601f8701819004810284018101909252858352925061123e918891849190889088908190840183828082843760009201829052506040805180820190915234815260208101919091529250339150611dc59050565b9695505050505050565b60008181526006602052604081206009810154829182916060918391829182918291829182919060ff1661128e5760405162461bcd60e51b815260040161072a90612c37565b80546001820154600283015460048401546005850154600686015460078701546008880154600989015460038a0180549096959460ff908116949392169087906112d790612aad565b80601f016020809104026020016040519081016040528092919081815260200182805461130390612aad565b80156113505780601f1061132557610100808354040283529160200191611350565b820191906000526020600020905b81548152906001019060200180831161133357829003601f168201915b505050505096509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b611381612323565b6000828152600660205260409020600981015460ff166113b35760405162461bcd60e51b815260040161072a90612c37565b600681015460ff166114075760405162461bcd60e51b815260206004820152601760248201527f4d61726b6574206e6f7420796574207265736f6c766564000000000000000000604482015260640161072a565b6000611417848360070154611ed0565b6008546040519192506114679163ffffffff9091169061143b908490602001612556565b60408051601f198184030181526000808452606084018352346020850190815292840152919033611dc5565b60078301546008546040805192835263ffffffff909116602083015291945085917fc88402aebbfa5f5c11d0e92085e0c6640ae522437553f29b72edbe604a0a7e11910160405180910390a25050919050565b6114c2611bb5565b6001600160a01b0381166114ec57604051631e4fbdf760e01b81526000600482015260240161072a565b6114f581611c37565b50565b6000818152600660205260409020600981015460ff1661152a5760405162461bcd60e51b815260040161072a90612c37565b600681015460ff16156115795760405162461bcd60e51b815260206004820152601760248201527613585c9ad95d08185b1c9958591e481c995cdbdb1d9959604a1b604482015260640161072a565b6008810154156115cb5760405162461bcd60e51b815260206004820152601c60248201527f536574746c656d656e7420616c72656164792072657175657374656400000000604482015260640161072a565b806001015481600201546115df9190612c7c565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b9190612a94565b10156116995760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420574554482062616c616e636500000000000000604482015260640161072a565b426008820155600354600454600183015460028401546001600160a01b039384169363095ea7b39316916116cc91612c7c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190612fd7565b61177e5760405162461bcd60e51b815260206004820152601460248201527315d1551208185c1c1c9bdd985b0819985a5b195960621b604482015260640161072a565b60048054600883015460018401546040516311df92f160e01b81526001600160a01b03909316936311df92f1936117e3936000805160206134388339815191529390926003890192737b79995e5f793a07bc00c21412e50ecae098e7f9929101612ff4565b6020604051808303816000875af1158015611802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118269190612a94565b5060048054600883015460028401546040516356ad3aad60e11b81526001600160a01b039093169363ad5a755a9361187593600080516020613438833981519152939092600389019201613030565b6020604051808303816000875af1158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190612a94565b506004805460088301548383015460405163239e22ff60e11b81526001600160a01b039093169363473c45fe9361190693600080516020613438833981519152939092600389019201613030565b600060405180830381600087803b15801561192057600080fd5b505af1158015611934573d6000803e3d6000fd5b505050506009810154610100900460ff1615611a475760048054600883015460405163120698af60e01b81526001600160a01b039092169263120698af9261199392600080516020613438833981519152929091600388019101613060565b600060405180830381600087803b1580156119ad57600080fd5b505af11580156119c1573d6000803e3d6000fd5b505060048054600885015460405163f327b07560e01b81526001600160a01b03909216945063f327b0759350611a149260008051602061343883398151915292600388019160009182916001910161307f565b600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050505b817f1bac1f5e61d784f9a7419341739a059a77d9e9402717546a273a13197ac71706826003018360080154604051611a809291906130be565b60405180910390a25050565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bb357600080fd5b6040805180820190915260008082526020820152600084604051602001611b039190612556565b604051602081830303815290604052905061123e86828686611f1c565b6000602082018035906001908390611b3890866126ca565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806108825760405163f6ff4fb760e01b815263ffffffff8416600482015260240161072a565b611b9e848601866130e0565b600590611bab9082612ef9565b5050505050505050565b6000546001600160a01b031633146108705760405163118cdaa760e01b815233600482015260240161072a565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8151811015611d5e57611cb9828281518110611ca857611ca8613114565b602002602001015160400151611d99565b818181518110611ccb57611ccb613114565b60200260200101516040015160026000848481518110611ced57611ced613114565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611d2757611d27613114565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611d559190612ef9565b50600101611c8a565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b67481604051611d8e919061312a565b60405180910390a150565b600281015161ffff81166003146107b55781604051639a6d49cd60e01b815260040161072a9190612556565b611dcd612323565b6000611ddc8460000151611ffd565b602085015190915015611df657611df68460200151612025565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001611e468c611b56565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401611e829291906131b5565b60806040518083038185885af1158015611ea0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611ec5919061327c565b979650505050505050565b6000828152600660205260409020606090611eea84612107565b611ef384612207565b604051602001611f049291906132d2565b60405160208183030381529060405291505092915050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001611f7f89611b56565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611fb49291906131b5565b6040805180830381865afa158015611fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff4919061334f565b95945050505050565b6000813414612021576040516304fb820960e51b815234600482015260240161072a565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015612085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a9919061336b565b90506001600160a01b0381166120d2576040516329b99a9560e11b815260040160405180910390fd5b6107b56001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085612252565b60608160000361212e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612158578061214281613388565b91506121519050600a836133b7565b9150612132565b6000816001600160401b0381111561217257612172612762565b6040519080825280601f01601f19166020018201604052801561219c576020820181803683370190505b5090505b8415610895576121b16001836133cb565b91506121be600a866133de565b6121c9906030612c7c565b60f81b8183815181106121de576121de613114565b60200101906001600160f81b031916908160001a905350612200600a866133b7565b94506121a0565b606060008212156122495761222361221e836133f2565b612107565b604051602001612233919061340e565b6040516020818303038152906040529050919050565b61088282612107565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526122ac9085906122b2565b50505050565b600080602060008451602086016000885af1806122d5576040513d6000823e3d81fd5b50506000513d915081156122ed5780600114156122fa565b6001600160a01b0384163b155b156122ac57604051635274afe760e01b81526001600160a01b038516600482015260240161072a565b60405180606001604052806000801916815260200160006001600160401b03168152602001612365604051806040016040528060008152602001600081525090565b905290565b60006060828403121561237c57600080fd5b50919050565b60008083601f84011261239457600080fd5b5081356001600160401b038111156123ab57600080fd5b6020830191508360208285010111156123c357600080fd5b9250929050565b6001600160a01b03811681146114f557600080fd5b600080600080600080600060e0888a0312156123fa57600080fd5b612404898961236a565b96506060880135955060808801356001600160401b038082111561242757600080fd5b6124338b838c01612382565b909750955060a08a01359150612448826123ca565b90935060c0890135908082111561245e57600080fd5b5061246b8a828b01612382565b989b979a50959850939692959293505050565b803563ffffffff8116811461249257600080fd5b919050565b600080604083850312156124aa57600080fd5b6124b38361247e565b946020939093013593505050565b803561ffff8116811461249257600080fd5b600080604083850312156124e657600080fd5b6124ef8361247e565b91506124fd602084016124c1565b90509250929050565b60005b83811015612521578181015183820152602001612509565b50506000910152565b60008151808452612542816020860160208601612506565b601f01601f19169290920160200192915050565b602081526000612569602083018461252a565b9392505050565b60008060008060a0858703121561258657600080fd5b612590868661236a565b935060608501356001600160401b038111156125ab57600080fd5b6125b787828801612382565b90945092505060808501356125cb816123ca565b939692955090935050565b6000602082840312156125e857600080fd5b5035919050565b60006101608d83528c60208401528b60408401528060608401526126158184018c61252a565b608084019a909a52505060a081019690965293151560c086015260e08501929092526101008401521515610120830152151561014090910152949350505050565b6000806020838503121561266957600080fd5b82356001600160401b038082111561268057600080fd5b818501915085601f83011261269457600080fd5b8135818111156126a357600080fd5b8660208260051b85010111156126b857600080fd5b60209290920196919550909350505050565b6000602082840312156126dc57600080fd5b6125698261247e565b600080600080606085870312156126fb57600080fd5b6127048561247e565b9350612712602086016124c1565b925060408501356001600160401b0381111561272d57600080fd5b61273987828801612382565b95989497509550505050565b60006020828403121561275757600080fd5b8135612569816123ca565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561279a5761279a612762565b60405290565b60405161014081016001600160401b038111828210171561279a5761279a612762565b604051601f8201601f191681016001600160401b03811182821017156127eb576127eb612762565b604052919050565b600082601f83011261280457600080fd5b81356001600160401b0381111561281d5761281d612762565b612830601f8201601f19166020016127c3565b81815284602083860101111561284557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561287b57600080fd5b86359550602087013594506040870135935060608701356001600160401b038111156128a657600080fd5b6128b289828a016127f3565b9350506080870135915060a087013590509295509295509295565b600080600080606085870312156128e357600080fd5b6128ec8561247e565b935060208501356001600160401b038082111561290857600080fd5b612914888389016127f3565b9450604087013591508082111561292a57600080fd5b5061273987828801612382565b6000608082019050825182526001600160401b0360208401511660208301526040830151612972604084018280518252602090810151910152565b5092915050565b60006101408c83528b60208401528a604084015280606084015261299f8184018b61252a565b6080840199909952505060a081019590955292151560c085015260e0840191909152610100830152151561012090910152949350505050565b80151581146114f557600080fd5b600080600080608085870312156129fc57600080fd5b612a058561247e565b935060208501356001600160401b0380821115612a2157600080fd5b612a2d888389016127f3565b94506040870135915080821115612a4357600080fd5b50612a50878288016127f3565b92505060608501356125cb816129d8565b815181526020808301519082015260408101610882565b600060608284031215612a8a57600080fd5b612569838361236a565b600060208284031215612aa657600080fd5b5051919050565b600181811c90821680612ac157607f821691505b60208210810361237c57634e487b7160e01b600052602260045260246000fd5b60006001600160401b0380841115612afb57612afb612762565b8360051b6020612b0c8183016127c3565b868152918501918181019036841115612b2457600080fd5b865b84811015612baa57803586811115612b3e5760008081fd5b88016060368290031215612b525760008081fd5b612b5a612778565b612b638261247e565b8152612b708683016124c1565b8682015260408083013589811115612b885760008081fd5b612b94368286016127f3565b9183019190915250845250918301918301612b26565b50979650505050505050565b60008085851115612bc657600080fd5b83861115612bd357600080fd5b5050820193919092039150565b60008451612bf2818460208901612506565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526015908201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561088257610882612c66565b60008154612c9c81612aad565b808552602060018381168015612cb95760018114612cd357612d01565b60ff1985168884015283151560051b880183019550612d01565b866000528260002060005b85811015612cf95781548a8201860152908301908401612cde565b890184019650505b505050505092915050565b60018060a01b038516815283602082015282604082015260806060820152600061123e6080830184612c8f565b8051612492816123ca565b8051612492816129d8565b600060e08284031215612d6157600080fd5b60405160e081018181106001600160401b0382111715612d8357612d83612762565b80604052508091508251612d96816129d8565b81526020830151612da6816129d8565b60208201526040830151612db9816129d8565b60408201526060830151612dcc816129d8565b6060820152612ddd60808401612d44565b608082015260a083015160a082015260c083015160c08201525092915050565b60006102008284031215612e1057600080fd5b612e186127a0565b612e2183612d39565b8152612e2f60208401612d39565b6020820152612e4060408401612d39565b6040820152612e5160608401612d44565b6060820152612e638460808501612d4f565b608082015261016083015160a082015261018083015160c08201526101a083015160e08201526101c08301516101008201526101e09092015161012083015250919050565b601f821115612ef4576000816000526020600020601f850160051c81016020861015612ed15750805b601f850160051c820191505b81811015612ef057828155600101612edd565b5050505b505050565b81516001600160401b03811115612f1257612f12612762565b612f2681612f208454612aad565b84612ea8565b602080601f831160018114612f5b5760008415612f435750858301515b600019600386901b1c1916600185901b178555612ef0565b600085815260208120601f198616915b82811015612f8a57888601518255948401946001909101908401612f6b565b5085821015612fa85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152826020820152606060408201526000611ff4606083018461252a565b600060208284031215612fe957600080fd5b8151612569816129d8565b85815284602082015260a06040820152600061301360a0830186612c8f565b6001600160a01b0394909416606083015250608001529392505050565b84815283602082015260806040820152600061304f6080830185612c8f565b905082606083015295945050505050565b838152826020820152606060408201526000611ff46060830184612c8f565b86815285602082015260c06040820152600061309e60c0830187612c8f565b9415156060830152509115156080830152151560a0909101529392505050565b6040815260006130d16040830185612c8f565b90508260208301529392505050565b6000602082840312156130f257600080fd5b81356001600160401b0381111561310857600080fd5b610895848285016127f3565b634e487b7160e01b600052603260045260246000fd5b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156131a757888303603f190185528151805163ffffffff1684528781015161ffff168885015286015160608785018190526131938186018361252a565b968901969450505090860190600101613153565b509098975050505050505050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526131eb60e084018261252a565b90506060850151603f198483030160a0850152613208828261252a565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561324057600080fd5b604051604081018181106001600160401b038211171561326257613262612762565b604052825181526020928301519281019290925250919050565b60006080828403121561328e57600080fd5b613296612778565b8251815260208301516001600160401b03811681146132b457600080fd5b60208201526132c6846040850161322e565b60408201529392505050565b6b3d9136b0b935b2ba24b2111d60a11b815282516000906132fa81600c850160208801612506565b6a161137baba31b7b6b2911d60a91b600c918401918201528351613325816017840160208801612506565b702c227265736f6c766564223a747275657d60781b60179290910191820152602801949350505050565b60006040828403121561336157600080fd5b612569838361322e565b60006020828403121561337d57600080fd5b8151612569816123ca565b60006001820161339a5761339a612c66565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826133c6576133c66133a1565b500490565b8181038181111561088257610882612c66565b6000826133ed576133ed6133a1565b500690565b6000600160ff1b820161340757613407612c66565b5060000390565b602d60f81b81526000825161342a816001850160208701612506565b919091016001019291505056fe4d554c5449504c455f43484f4943455f51554552590000000000000000000000a264697066735822122036b32fb7531c1a496faa0fbb1be97a60c227424106a778478aba56ab2c18a6ed64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quote(uint32,string,bytes,bool)": {
        "params": {
          "_dstEid": "Destination chain's endpoint ID.",
          "_message": "The message.",
          "_options": "Message execution options (e.g., for sending gas to destination).",
          "_payInLzToken": "Whether to return fee in ZRO token."
        },
        "returns": {
          "fee": "A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "send(uint32,string,bytes)": {
        "details": "Encodes the message as bytes and sends it using the `_lzSend` internal function.",
        "params": {
          "_dstEid": "The endpoint ID of the destination chain.",
          "_message": "The message string to be sent.",
          "_options": "Additional options for message execution."
        },
        "returns": {
          "receipt": "A `MessagingReceipt` struct containing details of the message sent."
        }
      },
      "sendMarketResult(uint256)": {
        "params": {
          "marketId": "The ID of the market to send"
        },
        "returns": {
          "receipt": "The messaging receipt"
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quote(uint32,string,bytes,bool)": {
        "notice": "Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token."
      },
      "send(uint32,string,bytes)": {
        "notice": "Sends a message from the source chain to a destination chain."
      },
      "sendMarketResult(uint256)": {
        "notice": "Sends a market result to Flow network"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1533,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 785,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1381,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 4663,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "weth",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWETH)4650"
      },
      {
        "astId": 4669,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "oo",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(OptimisticOracleV2Interface)2677"
      },
      {
        "astId": 4692,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "data",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4720,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "markets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Market)4715_storage)"
      },
      {
        "astId": 4722,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "marketCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4757,
        "contract": "contracts/SepoliaContract.sol:SepoliaContract",
        "label": "flowEndpointId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IWETH)4650": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV2Interface)2677": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV2Interface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(Market)4715_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SepoliaContract.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)4715_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)4715_storage": {
        "encoding": "inplace",
        "label": "struct SepoliaContract.Market",
        "members": [
          {
            "astId": 4694,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "marketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4696,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4698,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "bond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4700,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "questionText",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 4702,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "verificationTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4704,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "optionCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4706,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "isResolved",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4708,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "outcome",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 4710,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "requestTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4712,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "exists",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 4714,
            "contract": "contracts/SepoliaContract.sol:SepoliaContract",
            "label": "isEventBased",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}